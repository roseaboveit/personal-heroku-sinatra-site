date: 2014-4-12

<h3>The Beginner Checklist</h3>
<h3>What to do when you are banging your head against the wall but aren't ready to ask for help...</h3>
<div class="response">
  <p>The subtitle for this post is even more relevant than the actual title. I was thinking about this while working on my capstone, in fact. All of the points below were introduced fairly early in our path to becoming web developers at Ada and over time have become more ingrained. The problem I find is that I can never keep all these ideas in my head at the same time. I usually think of a couple of them and then lose track. As soon as I ask for help though, my helper mentions one of the items that I didn't have in mind. This often makes me feel embarrassed. I feel like I'm finally far enough along to have a good sense of the checklist I need to go through. I titled this post "The Beginner Checklist" because I think that it would serve beginners particularly well.</p>

  <ul>
    <li><strong>Read the Error</strong></li>
    <p>This seems really obvious. The truth is though that sometimes we get so used to seeing the same error that we don't notice the subtle differences. Sometimes it may be a different spec that is failing than we think. Sometimes in all that computer garbage there are some words we can pick out to give us a clue as to where our error is. To check off this option, just read the error message, even if you don't understand it and try to pick out pieces that might give you some insight into the problem.</p>
    <li><strong>Read the Logs</strong></li>
    <p>The error that you initially get in your browser or elsewhere may give you very different information than the errors that you get in your logs. If you are running locally, you can look at the terminal window where you started your server and you will see the details of what your local server has done. In there you will find any problems that it came across. If the problem is happening in production you need to go to those logs which might be trickier to find. On Heroku it is fairly easy. In your terminal type <pre><code>heroku logs</code></pre> and there you should find all the same sort of information.</p>
    <li><strong>Google the Error</strong></li>
    <p>This also seems really obvious. Sometimes when we are developing though, we can get tunnel vision and forget that others have had these problems before. Many of these problems we run into are solved problems that others have struggled with before us. Internet research is its own skill that takes time to develop. Understanding the results you get might also be beyond your current skill set. To check off this option, try a few different ways to research your problem online. Try framing it in the form of a question. Try using the key words of the problem. Try making your search more specific.</p>
    <li><strong>Restart Everything</strong></li>
    <p>Naturally with this one you should start with restarting the things that are most likely to be the problem. Restarting your server is an important one that often gets forgotten. Other candidates for restarting are your console, IRB, the terminal itself, and if all else fails your whole computer. Rarely is it that extreme of an issue. Nothing feels sillier though than asking for help and having someone remind you to restart your server and the problem being solved.</p>
    <li><strong>Talk to the Duck</strong></li>
    <p>In programming there is this concept called "rubber ducking." It explains the phenomenon of finding the answer on your own simply by explaining the problem to someone else. It is something that a lot of beginners are concerned about and why we don't ask for help when we should. We know it is going to be something small and so we want to figure it out ourselves. The benefit of an actual rubber duck though is that it is never disappointed and makes no judgments. Tell the duck your problems before you tell a human and you may surprise yourself with what you can figure out when you put it out there verbally.</p>
    <li><strong>Use a Debugging Strategy</strong></li>
    <p>Depending on what you are working on, there is probably a debugging strategy that is best for you to use. It might be raising an error to check on the state of variables. It might be using a debugger in for a javascript console. It might be putting in print statements to see what things look like in the logs. Any of these tactics can help you get a sense of where in your program things are going awry.</p>
    <li><strong>Play in the Console or IRB</strong></li>
    <p>In development, you really can play in your console quite a bit to see what things look like in the database and to see if various methods work. All else fails you drop the database and start over. That's what development is for, to figure out the kinks of the system while the data is fake. IRB is also a great tool for playing around to see how things work. You can even write whole classes and redefine methods on standard classes and when you leave IRB, nothing has changed. It is a sandbox to try out ideas. Even if you don't get to an answer, playing in the console and/or IRB will help you know more about the problem. This can help you formulate how to ask for help when that time comes.</p>
    <li><strong>Try a New Angle</strong></li>
    <p>I really enjoy TDD (Test Driven Development). This usually means that when I'm developing in rails I generally have things ready to work in the back end before I have any views at all, even for just the localhost server. What I find though is that I can switch my thinking and start working on some views to see how things are actually working and sometimes it will spark ideas that I wasn't able to see otherwise. This may also be true for people who need to know what it will look like first. Switching to thinking about the problem from a different perspective like the tests, database, model, or controller might give new insight.</p>
    <li><strong>Take a Break</strong></li>
    <p>Programming is hard. Even if you are one of those people who just keeps pushing until you get it, there is a point to step back for a moment and reconsider. Many times over the course of the program a problem that seemed insurmountable the night before seems fairly straightforward in the morning. Sometimes the break doesn't need to be that drastic though. Consider getting up for a glass of water, or even getting some fresh air. Take a moment to meditate, I particularly like <a href="http://www.thequietplaceproject.com/thequietplace">the quiet place</a>. Any of these things might provide the palate cleanser you nead to come back to the problem with a fresh perspective.</p>
  </ul>
</div>