date: 2014-1-19

<h3>Rails Routes for Beginners</h3>
<h3>Technical Blog Post #3</h3>
<div class="response">
  <p>In Week 9 I learned a lot about Rails. In particular, I learned a lot about routes. Something finally clicked and it all seemed so obvious. One of the issues that I have with technical blog posts, at the moment, is that I assume that what I have to share couldn't possibly be of help to anyone. This is the first topic that I don't feel that way about. I had a twitter conversation about it, helped people in class, and even taught some people at the Railsbridge Alum meetup at NIRD. I was encouraged by classmates to write a post about it so here we go.</p>

  <h4>Where are the routes? What do they do?</h4>
  <p>If you open up a rails application you will find the routes in the config folder. The file you are looking for is titled routes.rb. This file manages how you get from the user to the right controllers and views. It looks at the url and matches it with a controller and an action. Additionally, it can do so whether this route is passed in from your program itself or from the browser.</p>

  <h4>What are resources?</h4>
  <p>If you are looking back on a project you've done through Railsbridge or another tutorial, you might notice that there isn't much there other than something called resources. This is one of the pieces of rails magic that saves time, space, and confusion for many people. We're going to start peeling back this magic though. In short, resources is a quick and easy way to generate restful routes.</p>

  <h4>What are restful routes?</h4>
  <p>REST stands for Representational State Transfer. There is a lot that goes into that and most of it is outside the scope of this blog post. What IS in the scope of this blog post is where REST intersects with CRUD.</p>

  <h4>Okay then, what is CRUD?</h4>
  <p>CRUD is an acronym to think about when dealing with HTTP requests and routing, also programming in general. It stands for Create, Read, Update, Delete. If you stop and think about it, that is pretty much all we do when we make websites. We want to create things, be able to see them and show them to others, change them when necessary, and get rid of them when we want to. CRUD pretty much sums it up.</p>

  <h4>What does this have to do with routes?</h4>
  <p>Everything! Routes are what the program uses to go from user requests into meaningful display and changes in the program. CRUD is all about displaying and changing things in the program. So it makes sense that if our routes are RESTful, providing for all our CRUD needs in a sensible way, they will be in pretty good shape.</p>

  <h4>Let's peel back a layer of magic!</h4>
  <p>To get started with understanding routes, let's take a look at what exists under the hood. The RESTful routes are currently hidden under the magic of resources. We can see all the routes being generating in our terminal, though. Just navigate to a rails project you and type: rake routes</p> 
  <p>You should get something similar to this:</p>
  <p>
    <table>
      <tr>
        <th>Prefix</th>
        <th>Verb</th>
        <th>URI Pattern</th>
        <th>Controller#Action</th>
      </tr>
        <td>users</td>
        <td>GET</td>
        <td>/users(.:format)</td>
        <td>users#index</td>
      <tr>
      </tr>
        <td></td>
        <td>POST</td>
        <td>/users(.:format)</td>
        <td>users#create</td>
      <tr>
        <td>new_user</td>
        <td>GET</td>
        <td>/users/new(.:format)</td>
        <td>users#new</td>
      </tr>
      <tr>
        <td>edit_user</td>
        <td>GET</td>
        <td>/users/:id/edit(.:format)</td>
        <td>users#edit</td>
      </tr>
      <tr>
        <td>user</td>
        <td>GET</td>
        <td>/users/:id(.:format)</td>
        <td>users#show</td>
      </tr>
      <tr>
        <td></td>
        <td>PATCH</td>
        <td>/users/:id(.:format)</td>
        <td>users#update</td>
      </tr>
      <tr>
        <td></td>
        <td>PUT</td>
        <td>/users/:id(.:format)</td>
        <td>users#update</td>
      </tr>
      <tr>
        <td></td>
        <td>DELETE</td>
        <td>/users/:id(.:format)</td>
        <td>users#destroy</td>
      </tr>
    </table>                    
  </p>
  <p>Your personal situation may have a lot more routes than this. Your routes may use a different model. If you are using resources in your Rails app, however, the structure will be much the same.</p>

  <h4>What does it all mean?</h4>
  <p>Let's take a look at each of the headings: Prefix, Verb, URI Pattern, and Controller#Action.</p> 
  <p>On the far left you see "Prefix." This is used elsewhere in your application. It is not necessary for understanding routes to the scope that this blog post will cover.
  </p>
  <p>Next you see "Verb". These are the HTTP verbs. They all are related to CRUD actions. For "Create" we have "POST." For "Read" we have "GET." For "Update" we have "PUT" and "PATCH." And finally for "Delete" we have "DELETE."</p>
  <p>Next you see the URI Pattern. This, among other things, is a template for how the URL looks in the browser. It uses what is passed to routes to figure out which route the user wants.</p>
  <p>Finally we have the Controller#Action. After the correct route has been found it goes to the controller named first and the action within that controller second.</p>

  <h4>Wait, some of those URI Patterns look the same!</h4>
  <p>That's true. If you look at each route as a combination of Verb and URI pattern, though, you will see that they are quite different. Let's take a look at a frequently repeated snippet from our example: "/users/:id(.:format)"</p>
  <p>Although this URI Pattern is used four times in our Rails routes, each one is partnered with a different verb. "GET" to read that particular user. "PUT" and "PATCH" to update the user object. "DELETE" to delete the user.</p>

  <h4>Wait, why isn't there a POST verb for this URI pattern?</h4>
  <p>Nice catch! POST is used to create. If you look closely at this route it has the "/:id" part. This references a particular user by the id from the database. If we used this pattern for creating a user we'd need to know its id before we even created it. That's just not how it works. We only get an id by creating the user.</p>

  <h4>Oh yeah, the "/:id" part. That looks confusing. What's up with that?</h4>
  <p>There is a LOT up with it. This part of the URI Pattern is where it gets really dynamic. It is a symbol. You can tell because it has a colon (:). In this context it signifies that it can be anything. Well, rather, the routes will allow it to be anything. The routes passes some information on to the controller and action through something called params. Params is a big topic but what you really need to know is it is basically a hash. Since in our URI pattern there is a symbol, it makes a key and assigns the value it gets from the user (or program) to that key. So if our user typed in /users/2 after our domain it would put "2" into the params hash for the key of "id." Additionally though if you put something ridiculous in there it will store that as well. So /users/unicorn would store the value of "unicorn" as the id.</p>

  <h4>That's a lot going on! But... resources does this for me right?</h4>
  <p>Well, yes. All of this is being done by that one line of code "resources :users" but that's not the point. It can be really powerful to peel back some magic and really get a sense of how things work. For one thing it will allow you to make changes to your routes if you decide you want to. Knowledge is power. I recommend that you try a project or even just update an old project to explicitly state the routes. Just do it once. It will help you remember what is going on behind the scenes in your future Rails projects.</p>

  <h4>Alright, you've convinced me. What do I need to know.</h4>
  <p>First you need to know how to write rails routes in your config/routes.rb file. There are actually some really good examples commented out in that file, thanks to the Rails team being so helpful.</p>
  <p>The other thing you need to be aware of is a bit of a gotcha. You have to be careful about what order you put your routes in. This is related to the confusing "/:id" issue. When routes.rb is accessed in your program, it will start at the top and keep going down until it reaches the very first route that will satisfy the URI pattern. This can be a little confusing at first.</p>
  <p>As an example let's look at the new_user path. What would it look like if we placed it somewhere else in the ordering:</p>
  <table>
      <tr>
        <th>Prefix</th>
        <th>Verb</th>
        <th>URI Pattern</th>
        <th>Controller#Action</th>
      </tr>
        <td>users</td>
        <td>GET</td>
        <td>/users(.:format)</td>
        <td>users#index</td>
      <tr>
      </tr>
        <td></td>
        <td>POST</td>
        <td>/users(.:format)</td>
        <td>users#create</td>
      <tr>
        <td>edit_user</td>
        <td>GET</td>
        <td>/users/:id/edit(.:format)</td>
        <td>users#edit</td>
      </tr>
      <tr>
        <td>user</td>
        <td>GET</td>
        <td>/users/:id(.:format)</td>
        <td>users#show</td>
      </tr>
      <tr>
        <td>new_user</td>
        <td>GET</td>
        <td>/users/new(.:format)</td>
        <td>users#new</td>
      </tr>
      <tr>
        <td></td>
        <td>PATCH</td>
        <td>/users/:id(.:format)</td>
        <td>users#update</td>
      </tr>
      <tr>
        <td></td>
        <td>PUT</td>
        <td>/users/:id(.:format)</td>
        <td>users#update</td>
      </tr>
      <tr>
        <td></td>
        <td>DELETE</td>
        <td>/users/:id(.:format)</td>
        <td>users#destroy</td>
      </tr>
    </table>
    <p>Now we can simulate by starting at the top and look through the "GET" requests for a URI pattern that would match "/users/new". The top GET request is just "/users" so it isn't a match. The next one is "/users/edit" so it isn't a match. The next one however is "/users/:id"... At first glance this doesn't seem like a match but you have to remember to think like your computer. ":id" can match ANYTHING! So this becomes our match. So instead of getting us to the "users#new" we will be directed to the "users#show" and it will pass along an id of "new" in the params hash. Think about these things as you make your routes.</p>

    <h3>Your Challenge!</h3>
    <p>Write out some routes the long way. This can be for an old project or for a new one. Try to do it without looking up what you need. You can use the comments that come with rails for syntax though. Just think about what you need for your controller and start writing those routes. Before you freak yourself out with a broken program, think about the order that you wrote your routes and move them around until you don't have any problems mismatching problems like the ones we've discussed. Once you think you have it, try testing your site. Make sure you go where you expect to, and don't get any errors.</p>
</div>