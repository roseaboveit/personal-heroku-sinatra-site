date: 2013-12-30

<h3>Learning TDD: A Scaffolded-Learning Approach</h3>
<h3>Technical Blog Post #2</h3>
<div class="response">
  <p>Over the holiday break we were tasked with the challenge of making a rails app on our own. They gave a bunch of options and the one I chose is a small app for asking questions of fellow users and answering polls from fellow users. Since it is smaller than some of the other recommendations we were given a variety of ideas to challenge ourselves, one of which was to do a fully TDD approach to developing the app.</p>

  <p>Test Driven Development is great. I feel really connected to it philosophically. It seems like the right thing to do and I find myself frustrated when I fail to live up to the ideals. This made my first attempts at this project particularly challenging. I want to do it right but I don't really know enough to do so efficiently and effectively and it really bothers me.</p>

  <p>I once was in a Master's Program for education and in my classes we would often talk about scaffolding. In this context it meant building a bridge from where the student was to where the student needed to be on a particular concept, skill, or knowledge set. The steps of this bridge should be the right size but there should be a step for every student even if they are at different places on the path. This seemed highly relevant to my issue. My issue is that I'm trying to learn lots of things at the same time and have a hard time assessing where I am and what I need.</p>

  <p>Much TDD already has a layer of scaffolding to it. In discussions with teachers we were introduced to the concept of a spike. This is when you play with code for a while to make sure you understand what you want to test and how you want to test before you actually write your specs. This is great and I think an effective level of scaffolding for people who have been working in the industry for a little while. Good for people who have something solid, either the basic language they are working with but not the specific concept, or the specific concept but not the language. It is still a very big jump for those of us who are new to all of it.</p>

  <p>Below are my recommendations for new programmers. It should allow you to use TDD when you can and get closer to being able to when it is too far over your head.</p>

  <h4>Scaffolded TDD for New Programmers</h4>
  <ol><h5>Main Mode</h5>
    <li>Ensure You Have the Smallest Possible Piece to Work on</li>
    <li>Set a Timer for 20 Minutes and Try to Write Specs</li>
    <li>After 20 Min Evaluate Your Understanding</li>
    <ul>
      <li>If you have good specs at and understand what you are doing proceed to the next step</li>
      <li>If you do not have good specs or feel lost at writing specs proceed to the "Spike Mode"</li>
      <ol><h5>Spike Mode</h5>
        <li>Discard your Specs</li>
        <li>Set a Timer for 20 Minutes and Try to Write Your Code</li>
        <li>At the End of 20 Minutes Evaluate Your Feelings</li>
          <ul>
            <li>If you understand the inner workings now, toss the code and go back to writing specs</li>
            <li>If you don't understand the inner workings, keep going in Spike Mode.</li>
          </ul>
        <li>Once you have your code in Spike Mode write Specs and proceed to Refactor Mode</li>
      </ol>
    </ul>
    <li>Make sure your Specs are Red</li>
    <li>Use TDD to make your specs Green</li>
    <h5>Refactor Mode</h5>
    <li>Look through and review your code</li>
    <li>Find ways to make your code cleaner, simpler, more readable and more efficient</li>
    <li>Run your specs and make sure they are still green</li>
  </ol>
</div>